Object subclass: #Action	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Action commentStamp: '<historical>' prior: 0!I am an action. I modify the state of an oilfield during a simulation!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Action class	instanceVariableNames: 'oilfield'!Object subclass: #AlmacenationTank	instanceVariableNames: 'capacity cost remainingDaysToCompletion water gas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!AlmacenationTank commentStamp: '<historical>' prior: 0!I am an almacenation tank. I almacenate water and gas after they are separated by a processingPlant.Gas almacenated in me can be sold at any time to free up some space.Water cannot be sold. It must remain here!!AlmacenationTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 21:02'!advanceOneDay	"comment stating purpose of message"		remainingDaysToCompletion > 0 		ifTrue: [ remainingDaysToCompletion := remainingDaysToCompletion - 1 ]! !!AlmacenationTank methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:29'!cost	"comment stating purpose of message"	^cost! !!AlmacenationTank methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 12:34'!remainingDaysToCompletion	"comment stating purpose of message"	^remainingDaysToCompletion! !!AlmacenationTank methodsFor: 'accessing' stamp: 'PedroRodriguez 4/18/2017 15:38'!capacity	"comment stating purpose of message"	^capacity! !!AlmacenationTank methodsFor: 'private' stamp: 'PedroRodriguez 4/25/2017 18:20'!initializeWithCapacity: aNumberOfCubicMetres cost: aNumberOfDollars remainingDaysToCompletion: anAmountOfDays	"comment stating purpose of message"	capacity := aNumberOfCubicMetres.	cost := aNumberOfDollars.	remainingDaysToCompletion := anAmountOfDays.	water := 0.	gas := 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlmacenationTank class	instanceVariableNames: ''!!AlmacenationTank class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 21:09'!initializeWithCapacity: aNumberOfCubicMetres cost: aNumberOfDollars remainingDaysToCompletion: anAmountOfDays	"comment stating purpose of message"	^self new 		initializeWithCapacity: aNumberOfCubicMetres 		cost: aNumberOfDollars 		remainingDaysToCompletion: anAmountOfDays! !Object subclass: #Balance	instanceVariableNames: 'totalMoney'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Balance commentStamp: '<historical>' prior: 0!I am a balance sheet. !!Balance methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 20:44'!add: anAmountOfDollars	"comment stating purpose of message"	anAmountOfDollars < 0 ifTrue: [ ^(Error signal: 'cannot add a negative amount of money') ].	totalMoney := totalMoney + anAmountOfDollars.	^totalMoney! !!Balance methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 20:46'!canSpend: anAmountOfDollars	"comment stating purpose of message"	| moneyLeft |	moneyLeft := totalMoney - anAmountOfDollars.	moneyLeft < 0 ifTrue: [ ^false ] ifFalse: [ ^true ].! !!Balance methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 20:43'!subtract: anAmountOfDollars	"comment stating purpose of message"	| moneyLeft |	moneyLeft := totalMoney - anAmountOfDollars.	moneyLeft < 0 ifTrue: [ ^(Error signal: 'not enough money') ].	totalMoney := moneyLeft.	^totalMoney! !!Balance methodsFor: 'private' stamp: 'PedroRodriguez 4/13/2017 19:45'!initializeWith: anAmountOfMoney	"comment stating purpose of message"	totalMoney := anAmountOfMoney! !!Balance methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 22:56'!totalMoney	"comment stating purpose of message"	^totalMoney! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Balance class	instanceVariableNames: ''!!Balance class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 19:45'!initializeWith: anAmountOfMoney	"comment stating purpose of message"	^self new initializeWith: anAmountOfMoney! !Action subclass: #Build	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Build commentStamp: '<historical>' prior: 0!I take care of  building the strctures that are needed to be built in an oilfield!!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:03'!createWATwithMaxCapacity: aNumberOfCubicMetres withDaysToCompletion: aNumberOfDays	" require: ... "	^ [ :anOilfield :aSimulator |		| aWAT |		aWAT := WaterAlmacenationTank 			initializeWithCapacity: aNumberOfCubicMetres 			cost: aSimulator costOfAlmacenationTanks			remainingDaysToCompletion: aNumberOfDays.		anOilfield addAlmacenationTank: aWAT.		aWAT	]! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 15:51'!createWellOnParcel: aParcel	^ [ :anOilfield :aSimulator |  		aParcel hasWell ifFalse: 			[ Well 				initializeOn: aParcel				connectedTo: (anOilfield assignProcessingPlant);			  yourself.			]	]! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:12'!aBuildStrategy4	" the first day, check if there is a Well in parcel number 1 and create it if it hasnt been created yet "	^ [ :anOilfield :aSimulator |				aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := (self createWATwithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aGasAlmacenationTank := (self createGATWithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.						aProcessingPlant := (self createPPwithMaxDailyProcessing: 100 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)				value: anOilfield value: aSimulator. 			aProcessingPlant connectToAlmacenationTank: aWaterAlmacenationTank.			aProcessingPlant connectToAlmacenationTank: aGasAlmacenationTank.						(self createWellOnParcel: (anOilfield parcels at: 1)) value: anOilfield value: aSimulator.			(self createWellOnParcel: (anOilfield parcels at: 2)) value: anOilfield value: aSimulator.		]	].! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:14'!aBuildStrategy5	" until reaching the desired amount of Wells, create one well on some parcel that hasnt a Well yet "	^ [ :anOilfield :aSimulator |				aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := (self createWATwithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aGasAlmacenationTank := (self createGATWithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.						aProcessingPlant := (self createPPwithMaxDailyProcessing: 100 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)				value: anOilfield value: aSimulator. 			aProcessingPlant connectToAlmacenationTank: aWaterAlmacenationTank.			aProcessingPlant connectToAlmacenationTank: aGasAlmacenationTank.		].		anOilfield numberOfWells < aSimulator desiredAmountOfWells ifTrue: [ 			| i |			i := 0.			anOilfield parcels values do: [:each | 				(i < 1 and: each hasWell not) ifTrue: [ 					Well initializeOn: each connectedTo: (anOilfield assignProcessingPlant). 					i := i + 1 					] 				]		]	]! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:17'!aBuildStrategy1	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := 				(self createWATwithMaxCapacity: 1e9 withDaysToCompletion: 0) 					value: anOilfield value: aSimulator.			aGasAlmacenationTank := 				(self createGATWithMaxCapacity: 1e9 withDaysToCompletion: 0)					value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.			aProcessingPlant := 				(self createPPwithMaxDailyProcessing: 1e9 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)					value: anOilfield value: aSimulator.			aProcessingPlant connectToAlmacenationTank: aWaterAlmacenationTank.			aProcessingPlant connectToAlmacenationTank: aGasAlmacenationTank.		]	].! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:00'!createPPwithMaxDailyProcessing: aNumberOfCubicMetres withDaysToCompletion: aNumberOfDays connectedToWells: aCollectionOfWells	" require: ... "	^ [ :anOilfield :aSimulator |		| aPP |		aPP := ProcessingPlant 			initializeWithMaxDailyProductProcessing: aNumberOfCubicMetres			remainingDaysToCompletion: aNumberOfDays			cost: aSimulator costOfProcessingPlants			almacenationTanks: OrderedCollection new.		anOilfield addProcessingPlant: aPP.		aPP	]! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:21'!aBuildStrategy2	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := 				(self createWATwithMaxCapacity: 1e9 withDaysToCompletion: 0) 					value: anOilfield value: aSimulator.			aGasAlmacenationTank := 				(self createGATWithMaxCapacity: 1e9 withDaysToCompletion: 0)					value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.			aProcessingPlant := 				(self createPPwithMaxDailyProcessing: 1e9 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)					value: anOilfield value: aSimulator.			aProcessingPlant connectToAlmacenationTank: aWaterAlmacenationTank.			aProcessingPlant connectToAlmacenationTank: aGasAlmacenationTank.			(self createWellOnParcel: (anOilfield parcels at: 1)) value: anOilfield value: aSimulator.		]	].! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:08'!aBuildStrategy3	" the first day, check if there is a Well in parcel number 1 and create it if it hasnt been created yet "	^ [ :anOilfield :aSimulator |				aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := (self createWATwithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aGasAlmacenationTank := (self createGATWithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.						aProcessingPlant := (self createPPwithMaxDailyProcessing: 100 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)				value: anOilfield value: aSimulator. 			aProcessingPlant connectToAlmacenationTank: aWaterAlmacenationTank.			aProcessingPlant connectToAlmacenationTank: aGasAlmacenationTank.						(self createWellOnParcel: (anOilfield parcels at: 1)) value: anOilfield value: aSimulator.		]	].! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:07'!createGATWithMaxCapacity: aNumberOfCubicMetres withDaysToCompletion: aNumberOfDays	" require: ... "	^ [ :anOilfield :aSimulator |		| aGAT |		aGAT := GasAlmacenationTank 			initializeWithCapacity: aNumberOfCubicMetres 			cost: aSimulator costOfAlmacenationTanks			remainingDaysToCompletion: aNumberOfDays.		anOilfield addAlmacenationTank: aGAT.		aGAT	]! !!Build methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:30'!doNothing	^ [ :anOilfield :aSimulator |  ]! !Action subclass: #Buy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Buy commentStamp: '<historical>' prior: 0!I take care of buying the machinery necessary in an oilfield!Object subclass: #Condition	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Condition commentStamp: '<historical>' prior: 0!I decide when the explotation of an oilfield should finish!!Condition methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 15:00'!check: aCondition in: anOilfield	^ self subclassResponsibility! !Condition subclass: #ConditionOnDays	instanceVariableNames: 'maximumDays'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ConditionOnDays commentStamp: '<historical>' prior: 0!I condition the ending of an oilfield explotation, depending on the number of days the explotations takes!!ConditionOnDays methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 14:57'!check: anOilfield in: aSimulation	^ aSimulation daysSimulated < maximumDays! !!ConditionOnDays methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 15:00'!maximumDays: anAmountOfDays	maximumDays := anAmountOfDays! !Condition subclass: #ConditionOnTotalMoneyLeft	instanceVariableNames: 'minimumTotalMoneyLeft'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ConditionOnTotalMoneyLeft commentStamp: '<historical>' prior: 0!I condition on the max number of days to simulate!!ConditionOnTotalMoneyLeft methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 15:01'!minimumTotalMoneyLeft: aNumberOfDollars	"comment stating purpose of message"	minimumTotalMoneyLeft := aNumberOfDollars! !!ConditionOnTotalMoneyLeft methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 16:07'!check: anOilfield in: aSimulation	^ anOilfield balanceSheet totalMoney >= minimumTotalMoneyLeft.! !Action subclass: #Dig	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Dig commentStamp: '<historical>' prior: 0!I am responsibility of the digging dynamics of wells in an oifield!!Dig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:40'!digEveryDayTheWellInParcel1WithAllItsRigs	" dig every day the well in parcel number 1 with all the rigs present in the parcel "	^ [ :anOilfield :aSimulator |		| aParcel |		aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].		aParcel rigs collect: [ :each | each isActive ifTrue: [each dig] ].	]! !!Dig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:38'!doNothing	^ [ :anOilfield :aSimulator | ]! !!Dig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 21:41'!digTheFirstAndSecondDayParcel1And2WithAllTheRigsInTheParcel	"comment stating purpose of message"	^ [ :anOilfield :aSimulator |		| aParcel anotherParcel |		(aSimulator daysSimulated between: 0 and: 1) ifTrue: [			aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aParcel rigs collect: [ :each | each isActive ifTrue: [each dig] ].						anotherParcel := anOilfield parcels at: 2 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			anotherParcel rigs collect: [ :each | each isActive ifTrue: [each dig] ].		].	]! !!Dig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:39'!digTheFirstDayParcel1WithAllTheRigsInTheParcel	" dig just the first day the parcel number 1 with all the rigs present in the parcel "	^ [ :anOilfield :aSimulator |		| aParcel |		aSimulator daysSimulated = 0 ifTrue: [			aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aParcel rigs collect: [ :each | each isActive ifTrue: [each dig] ].		].	]! !!Dig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 21:30'!digTheFirstDayParcel1And2WithAllTheRigsInTheParcel	"comment stating purpose of message"	^ [ :anOilfield :aSimulator |		| aParcel anotherParcel |		aSimulator daysSimulated = 0 ifTrue: [			aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aParcel rigs collect: [ :each | each isActive ifTrue: [each dig] ].						anotherParcel := anOilfield parcels at: 2 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			anotherParcel rigs collect: [ :each | each isActive ifTrue: [each dig] ].		].	]! !Action subclass: #Extract	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Extract commentStamp: '<historical>' prior: 0!I have the responsibility of the strategy to make extraction of product from an oilfield!!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:53'!doNothing	"comment stating purpose of message"	^[ :anOilfield :aSimulator | ]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 20:15'!extractTheSecondDayAsMuchProductAsPotentiallyPossible	" extract the second day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 1 ifTrue: [ 			anOilfield parcels collect: [ :eachParcel | 				eachParcel well activate. " activate the Well on every parcel "							aSimulator addToLog: 'Day number ', aSimulator daysSimulated asString, ': ', 					Character cr asString, 						(anOilfield extractProduct: (anOilfield potentialVolumeToExtractFrom: eachParcel well) fromWell: eachParcel well).			]		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 20:13'!secondDayActivateWellsAndExtractAbsolutelyAllTheProductAtOnce	" on the second day, activate the Wells and extract full product all at once "	^ [ :anOilfield :aSimulator |		| actionLog |		aSimulator daysSimulated = 1 ifTrue: [ 			anOilfield parcels collect: [ :eachParcel | 				eachParcel well activate. "activate the Well on every parcel " 								actionLog := anOilfield extractProduct: anOilfield petrolVolume + anOilfield waterVolume + anOilfield gasVolume 						                  fromWell: eachParcel well.				aSimulator addToLog: 'Day number ', aSimulator daysSimulated asString, ': ', 					Character cr asString, actionLog.			]		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 15:08'!tryExtractingProductTheFirstDay	" try extracting the first day. It will fail because of not waiting 1 day after the building of the Well "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			anOilfield parcels collect: [ :eachParcel | 				eachParcel well activate. "activate the Well on every parcel " 				anOilfield extractProduct: anOilfield petrolVolume + anOilfield waterVolume + anOilfield gasVolume 						     fromWell: eachParcel well.			]		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 20:15'!extractTheThirdAndFourthDayAsMuchProductAsPotentiallyPossible	" extract the second day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		(aSimulator daysSimulated between: 2 and: 3) ifTrue: [ 			anOilfield parcels collect: [ :eachParcel | 				eachParcel well activate. " activate the Well on every parcel "							" extract the maximum amount of permitted product from the oilfield "				aSimulator addToLog: 'Day number ', aSimulator daysSimulated asString, ': ', 					Character cr asString, 						(anOilfield extractProduct: (anOilfield potentialVolumeToExtractFrom: eachParcel well) fromWell: eachParcel well).				]					]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 20:14'!extractTheSecondAndThirdDayAsMuchProductAsPotentiallyPossible	" extract the second day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		(aSimulator daysSimulated between: 1 and: 2) ifTrue: [ 			anOilfield parcels collect: [ :eachParcel | 				eachParcel well activate. " activate the Well on every parcel "								" extract the maximum amount of permitted product from the oilfield "					aSimulator addToLog: 'Day number ', aSimulator daysSimulated asString, ': ', 					Character cr asString, 						(anOilfield extractProduct: (anOilfield potentialVolumeToExtractFrom: eachParcel well) fromWell: eachParcel well).				]		]	]! !AlmacenationTank subclass: #GasAlmacenationTank	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!GasAlmacenationTank commentStamp: 'PedroRodriguez 4/21/2017 15:51' prior: 0!Hi!! i am a gas AT!!GasAlmacenationTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:18'!almacenateGas: aNumberOfCubicMetres	"comment stating purpose of message"	capacity >= aNumberOfCubicMetres		ifTrue: [ 			gas := gas + aNumberOfCubicMetres.			capacity := capacity - aNumberOfCubicMetres		]		ifFalse: [ ^(Error signal: 'cant almacenate so much in this almacenation tank') ].! !!GasAlmacenationTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:19'!gas	"comment stating purpose of message"	^gas! !Object subclass: #Oilfield	instanceVariableNames: 'parcels originalVolume petrolVolume waterVolume gasVolume balanceSheet processingPlants almacenationTanks alpha1 alpha2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Oilfield commentStamp: '<historical>' prior: 0!I am an oilfield. I am composed of several parcels. !!Oilfield methodsFor: 'private' stamp: 'PedroRodriguez 4/23/2017 21:33'!parcelate: aDictionaryOfParcels withVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars alpha1: aNumber1 alpha2: aNumber2	aPercentageOfPetrol + aPercentageOfWater + aPercentageOfGas = 1 ifFalse: [ ^(Error signal: 'percentages dont sum 1') ].	parcels := aDictionaryOfParcels.	originalVolume := aNumberOfCubicMetres.	petrolVolume := aNumberOfCubicMetres * aPercentageOfPetrol.	waterVolume := aNumberOfCubicMetres * aPercentageOfWater.	gasVolume := aNumberOfCubicMetres * aPercentageOfGas.	balanceSheet := Balance initializeWith: anAmountOfDollars.	processingPlants := OrderedCollection new. 	almacenationTanks := OrderedCollection new.	alpha1 := aNumber1.	alpha2 := aNumber2.! !!Oilfield methodsFor: 'private' stamp: 'PedroRodriguez 4/17/2017 14:50'!extractProduct: aNumberOfCubicMetres	" update quantities of each element, and update the pressure of each parcel "	| percentagePetrol percentageWater percentageGas newVolume totalVolumeBefore |		aNumberOfCubicMetres > (petrolVolume + waterVolume + gasVolume) 		ifTrue: [ ^(Error signal: 'not enough product to extract') ].			totalVolumeBefore := petrolVolume + waterVolume + gasVolume.	percentagePetrol := petrolVolume / totalVolumeBefore. 	percentageWater := waterVolume / totalVolumeBefore.	percentageGas := gasVolume / totalVolumeBefore.		" update volume "	petrolVolume := petrolVolume - (aNumberOfCubicMetres * percentagePetrol).	waterVolume := waterVolume - (aNumberOfCubicMetres * percentageWater).	gasVolume := gasVolume - (aNumberOfCubicMetres * percentageGas).				" update pressure of parcels "	newVolume := petrolVolume + waterVolume + gasVolume.	parcels collect: [ :eachParcel |		| beta |		beta := (0.1 * (newVolume / originalVolume) ) / (self numberOfActiveWells ** (2 / 3) ).		eachParcel updatePressureWithBeta: beta.	]! !!Oilfield methodsFor: 'private' stamp: 'PedroRodriguez 4/23/2017 21:33'!parcelate: aDictionaryOfParcels withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	| aNumberOfCubicMetres |	aNumberOfCubicMetres := 1e8.	originalVolume := 1e8.	aPercentageOfPetrol + aPercentageOfWater + aPercentageOfGas = 1 ifFalse: [ ^(Error signal: 'percentages dont sum 1') ].	parcels := aDictionaryOfParcels.	petrolVolume := aNumberOfCubicMetres * aPercentageOfPetrol.	waterVolume := aNumberOfCubicMetres * aPercentageOfWater.	gasVolume := aNumberOfCubicMetres * aPercentageOfGas.	balanceSheet := Balance initializeWith: anAmountOfDollars.	processingPlants := OrderedCollection new. 	almacenationTanks := OrderedCollection new.	alpha1 := 0.1.	alpha2 := 0.01.! !!Oilfield methodsFor: 'private' stamp: 'PedroRodriguez 4/23/2017 21:33'!parcelate: aDictionaryOfParcels withVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	aPercentageOfPetrol + aPercentageOfWater + aPercentageOfGas = 1 ifFalse: [ ^(Error signal: 'percentages dont sum 1') ].	parcels := aDictionaryOfParcels.	originalVolume := aNumberOfCubicMetres.	petrolVolume := aNumberOfCubicMetres * aPercentageOfPetrol.	waterVolume := aNumberOfCubicMetres * aPercentageOfWater.	gasVolume := aNumberOfCubicMetres * aPercentageOfGas.	balanceSheet := Balance initializeWith: anAmountOfDollars.	processingPlants := OrderedCollection new. 	almacenationTanks := OrderedCollection new.	alpha1 := 0.1.	alpha2 := 0.01.! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:33'!gasVolume	"comment stating purpose of message"	^gasVolume! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:30'!balanceSheet	"comment stating purpose of message"	^balanceSheet ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:33'!waterVolume	"comment stating purpose of message"	^waterVolume ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/15/2017 21:40'!activeWells	"comment stating purpose of message"	| activeWells |	activeWells := Set new.	self parcels collect: [ :each | each hasWell ifTrue: [ 			each well isActive ifTrue: [ activeWells add: each ]	 		] 	].	^activeWells  ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/18/2017 15:18'!processingPlants	"comment stating purpose of message"	^processingPlants ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/21/2017 12:05'!percentageOfPetrol	"comment stating purpose of message"	^petrolVolume / (petrolVolume + waterVolume + gasVolume)! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:33'!petrolVolume	"comment stating purpose of message"	^petrolVolume ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:49'!parcels	"comment stating purpose of message"	^parcels! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/21/2017 12:06'!percentageOfWater	"comment stating purpose of message"	^waterVolume / (petrolVolume + waterVolume + gasVolume)! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/21/2017 12:06'!percentageOfGas	"comment stating purpose of message"	^gasVolume / (petrolVolume + waterVolume + gasVolume)! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:47'!payRentFees	"comment stating purpose of message"	parcels collect: [ :eachParcel |		eachParcel rigs do: [ :eachRig | 			(eachRig isActive or: eachRig daysLeftPayingBasicFee > 0) ifTrue: [				balanceSheet subtract: eachRig costRent .			]		]	].! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 21:32'!addAlmacenationTank: anAlmacenationTank	"comment stating purpose of message"	(self balanceSheet canSpend: (anAlmacenationTank cost)) 		ifFalse: [ ^(Error signal: 'not enough money') ]		ifTrue: [ self balanceSheet subtract: (anAlmacenationTank cost) ].		almacenationTanks add: anAlmacenationTank ! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:54'!potentialVolumeToExtractFrom: aWell	"comment stating purpose of message"	| answer |	aWell isActive ifFalse: [ ^0 ].	answer := ((alpha1 * (aWell parcel pressure / self numberOfActiveWells)) 					+ ( (alpha2 * (aWell parcel pressure / self numberOfActiveWells) ) ** 2 )) min: aWell maxProcessingCapability.						^answer! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/15/2017 21:40'!numberOfActiveWells	"comment stating purpose of message"	| numberOfActiveWells |	numberOfActiveWells := 0.	self parcels collect: [ :each | each hasWell ifTrue: [ 			each well isActive ifTrue: [ numberOfActiveWells := numberOfActiveWells + 1 ]	 		] 	].	^numberOfActiveWells ! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 14:41'!extractProduct: aNumberOfCubicMetresToExtract fromWell: aWell	" depending on the Well, decide how much product is possible to extract from the Well, of all the desired amount  "	" must send the extracted product to a processingPlant. "	| realNumberOfCubicMetresToExtract selected sumOfSelected |	selected := aWell selectProcessingPlantsForExtracting: aNumberOfCubicMetresToExtract.	(selected size = 0)		ifTrue: [ 			sumOfSelected := 0 		] ifFalse: [ 			sumOfSelected := (selected collect: [ :each | each capacity ]) sum 		].		realNumberOfCubicMetresToExtract := aNumberOfCubicMetresToExtract min: sumOfSelected.	" the Well should be able to send product to more than 1 processing plant (return a List of PP for the extraction) "		aWell sendToProcessingPlants: realNumberOfCubicMetresToExtract withPercentages: 		{ self percentageOfWater . self percentageOfGas . self percentageOfPetrol  }.	self extractProduct: realNumberOfCubicMetresToExtract.		^realNumberOfCubicMetresToExtract asString, ' cubic metres of product where extracted from Well ', aWell name asString.! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:24'!numberOfActiveRigs	"comment stating purpose of message"	| numberOfActiveRigs |	numberOfActiveRigs := 0.	self parcels collect: [ :eachParcel | 		eachParcel rigs collect: [ :eachRig |			eachRig isActive ifTrue: [ numberOfActiveRigs := numberOfActiveRigs + 1 ]		]	].		^numberOfActiveRigs! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/18/2017 15:18'!almacenationTanks	"comment stating purpose of message"	^almacenationTanks ! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/20/2017 18:10'!assignProcessingPlant	"comment stating purpose of message"	^processingPlants first.! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 10:34'!numberOfWells	"comment stating purpose of message"	| totalWells |	totalWells := 0.	parcels values collect: [ :each | each hasWell ifTrue: [ totalWells := totalWells + 1 ] ].	^totalWells! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:56'!numberOfRigs	"comment stating purpose of message"	| numberOfRigs |	numberOfRigs := 0.	self parcels collect: [ :eachParcel | 		eachParcel rigs collect: [ :eachRig |			numberOfRigs := numberOfRigs + 1		]	].		^numberOfRigs! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/24/2017 13:59'!advanceOneDay	" pay the rigs fees "	self payRentFees.	" advance the construction of the machines "	self processingPlants collect: [ :each | each advanceOneDay ].	self almacenationTanks collect: [ :each | each advanceOneDay ].	self parcels collect: [ :eachParcel |		eachParcel advanceOneDay	].	self processingPlants collect: [ :each |		each resetCapacity	].! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 21:33'!addProcessingPlant: aProcessingPlant	"comment stating purpose of message"		(self balanceSheet canSpend: (aProcessingPlant cost)) 		ifFalse: [ ^(Error signal: 'not enough money') ]		ifTrue: [ self balanceSheet subtract: (aProcessingPlant cost) ].		processingPlants add: aProcessingPlant ! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/23/2017 21:31'!gasTanks	"comment stating purpose of message"	^almacenationTanks select: [ :each | each isMemberOf: GasAlmacenationTank ]! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/23/2017 21:32'!waterTanks	"comment stating purpose of message"	^almacenationTanks select: [ :each | each isMemberOf: WaterAlmacenationTank ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Oilfield class	instanceVariableNames: ''!!Oilfield class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 10:31'!parcelate: aDictionaryOfParcels withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	^self new 		parcelate: aDictionaryOfParcels 		withPetrol: aPercentageOfPetrol 		withWater: aPercentageOfWater 		withGas: aPercentageOfGas 		withMoney: anAmountOfDollars! !!Oilfield class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 10:32'!parcelate: aDictionaryOfParcels withVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars alpha1: aNumber1 alpha2: aNumber2	^self new 		parcelate: aDictionaryOfParcels 		withVolume: aNumberOfCubicMetres 		withPetrol: aPercentageOfPetrol 		withWater: aPercentageOfWater 		withGas: aPercentageOfGas 		withMoney: anAmountOfDollars 		alpha1: aNumber1 		alpha2: aNumber2! !!Oilfield class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 19:51'!parcelate: aDictionaryOfParcels withVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	^self new 		parcelate: aDictionaryOfParcels 		withVolume: aNumberOfCubicMetres 		withPetrol: aPercentageOfPetrol 		withWater: aPercentageOfWater 		withGas: aPercentageOfGas 		withMoney: anAmountOfDollars! !Object subclass: #OilfieldGuideline	instanceVariableNames: 'actions'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!OilfieldGuideline commentStamp: '<historical>' prior: 0!I am an Oilfield Outline. I decide what actions do according to the state of the simulation and the oilfield!!OilfieldGuideline methodsFor: 'private' stamp: 'PedroRodriguez 4/13/2017 17:59'!createWith: anArrayOfActions	actions := anArrayOfActions ! !!OilfieldGuideline methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 18:13'!nextActionsOf: aSimulation in: anOilfield	^ actions! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OilfieldGuideline class	instanceVariableNames: ''!!OilfieldGuideline class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 19:52'!createWith: anArrayOfActions	^ self new createWith: anArrayOfActions! !Object subclass: #Parcel	instanceVariableNames: 'depth pressure terrain well hasWell rigs name'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Parcel commentStamp: '<historical>' prior: 0!I am a parcel. I can have 0 or 1 well in me.!!Parcel methodsFor: 'private' stamp: 'PedroRodriguez 4/17/2017 14:28'!createWithDepth: aNumberOfMetres pressure: aNumberOfHectoPascals terrain: aTerrain withName: aName	depth := aNumberOfMetres.	pressure := aNumberOfHectoPascals.	terrain := aTerrain.	hasWell := false.	rigs := LinkedList new.	name := aName.! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 08:56'!depth	"comment stating purpose of message"	^depth! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 18:45'!pressure	"comment stating purpose of message"	^pressure! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/17/2017 14:29'!name	"comment stating purpose of message"	^name! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:29'!terrain	"comment stating purpose of message"	^terrain! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:53'!hasWell	"comment stating purpose of message"	^hasWell! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 08:51'!well	"comment stating purpose of message"	hasWell ifFalse: [ ^(Error signal: 'i dont have a Well in me yet') ].	^well! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 07:31'!rigs	"comment stating purpose of message"	^rigs! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 18:19'!updatePressureWithBeta: beta	"comment stating purpose of message"	pressure := pressure * (Float e ** (-1 * beta) ).! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 07:32'!addRig: aRig	"comment stating purpose of message"	rigs add: aRig! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 08:49'!createWell: aWell	"comment stating purpose of message"	hasWell ifTrue: [ ^(Error signal: 'a Well has already been created in this Parcel') ].	hasWell := true.	well := aWell.! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/24/2017 14:00'!advanceOneDay	"comment stating purpose of message"	rigs collect: [ :eachRig | 		eachRig advanceOneDay		].	hasWell ifTrue: [ 		well advanceOneDay	]! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 07:33'!moveRig: aRig to: aParcel	"comment stating purpose of message"	rigs reject: aRig.	aParcel addRig: aRig.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Parcel class	instanceVariableNames: 'lastId'!!Parcel class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 14:28'!createWithDepth: aNumberOfMetres pressure: aNumberOfHectoPascals terrain: aTerrain	lastId isNil ifTrue: [ lastId := 1 ] ifFalse: [ lastId := lastId + 1 ].	^ self new 		createWithDepth: aNumberOfMetres 		pressure: aNumberOfHectoPascals 		terrain: aTerrain		withName: lastId.! !Object subclass: #ProcessingPlant	instanceVariableNames: 'maxDailyProductProcessing remainingDaysToCompletion cost capacity almacenationTanks'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ProcessingPlant commentStamp: '<historical>' prior: 0!I am a processing plant.I take care of separating product in water, gas and petroleum.Several wells can be connected to me at the same time, with the limitation of my processing capacity. !!ProcessingPlant methodsFor: 'private' stamp: 'PedroRodriguez 4/18/2017 14:48'!initializeWithMaxDailyProductProcessing: aNumber remainingDaysToCompletion: anAmountOfDays cost: aNumberOfDollars almacenationTanks: aListOfAlmacenationanks	"comment stating purpose of message"	maxDailyProductProcessing := aNumber.	capacity := aNumber.	remainingDaysToCompletion := anAmountOfDays.	cost := aNumberOfDollars.	almacenationTanks := aListOfAlmacenationanks.! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/23/2017 21:24'!sendToWaterAlmacenationTank: aNumberOfCubicMetres	"comment stating purpose of message"	| waterAlmacenationTanks cubicMetresLeft availableCapacity |	waterAlmacenationTanks := almacenationTanks select: [ :each | each isMemberOf: WaterAlmacenationTank ].		availableCapacity := 0.	waterAlmacenationTanks collect: [ :each | availableCapacity := availableCapacity + each capacity ].	availableCapacity < aNumberOfCubicMetres ifTrue: [ ^(Error signal: 'not enough capacity of ATs connected to PP') ].		cubicMetresLeft := aNumberOfCubicMetres.	waterAlmacenationTanks collect: [ :each | 		cubicMetresLeft > 0 ifTrue: [ 			| toAlmacenate |			toAlmacenate := cubicMetresLeft min: each capacity. 			each almacenateWater: cubicMetresLeft.			cubicMetresLeft := cubicMetresLeft - toAlmacenate.		]	]		! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:48'!advanceOneDay	"comment stating purpose of message"		remainingDaysToCompletion > 0 		ifTrue: [ remainingDaysToCompletion := remainingDaysToCompletion - 1 ].	capacity := maxDailyProductProcessing.! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 17:52'!resetCapacity	"comment stating purpose of message"	capacity := maxDailyProductProcessing.! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 15:42'!process: aNumberOfCubicMetres withPercentages: anArrayOfPercentagesWGP	"comment stating purpose of message"	self checkAlmacenationTanks.	self checkCapacity: aNumberOfCubicMetres.			capacity := capacity - aNumberOfCubicMetres.		" TODO: define 'types of almacenation tanks' to separate water, gas and petrol "	self sendToWaterAlmacenationTank: (anArrayOfPercentagesWGP at: 1) * aNumberOfCubicMetres.	self sendToGasAlmacenationTank: (anArrayOfPercentagesWGP at: 2) * aNumberOfCubicMetres.	self getRidOfPetrol: (anArrayOfPercentagesWGP at: 3) * aNumberOfCubicMetres.		! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 12:22'!getRidOfPetrol: aNumberOfCubicMetresOfPetrol	^1			! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:01'!isAlreadyBuilt	"comment stating purpose of message"	" TODO: check that the the almacenation tanks can handle aNumberOfCubicMetres of product "	^remainingDaysToCompletion < 1! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 13:29'!connectToAlmacenationTank: anAlmacenationTank	"comment stating purpose of message"	almacenationTanks add: anAlmacenationTank.! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/23/2017 21:26'!sendToGasAlmacenationTank: aNumberOfCubicMetres	"comment stating purpose of message"
	| gasAlmacenationTanks cubicMetresLeft availableCapacity |	gasAlmacenationTanks := almacenationTanks select: [ :each | each isMemberOf: GasAlmacenationTank ].		availableCapacity := 0.	gasAlmacenationTanks collect: [ :each | availableCapacity := availableCapacity + each capacity ].	availableCapacity < aNumberOfCubicMetres ifTrue: [ ^(Error signal: 'not enough capacity of ATs connected to PP') ].		cubicMetresLeft := aNumberOfCubicMetres.	gasAlmacenationTanks collect: [ :each | 		cubicMetresLeft > 0 ifTrue: [ 			| toAlmacenate |			toAlmacenate := cubicMetresLeft min: each capacity. 			each almacenateGas: cubicMetresLeft.			cubicMetresLeft := cubicMetresLeft - toAlmacenate.		]	]				! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 12:28'!isAvailableToProcess: aNumberOfCubicMetres	"comment stating purpose of message"	" TODO: check that the the almacenation tanks can handle aNumberOfCubicMetres of product "	^remainingDaysToCompletion < 1! !!ProcessingPlant methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:29'!cost	"comment stating purpose of message"	^cost! !!ProcessingPlant methodsFor: 'accessing' stamp: 'PedroRodriguez 4/18/2017 15:23'!almacenationTanks	"comment stating purpose of message"	^almacenationTanks! !!ProcessingPlant methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 12:34'!remainingDaysToCompletion	"comment stating purpose of message"	^remainingDaysToCompletion! !!ProcessingPlant methodsFor: 'accessing' stamp: 'PedroRodriguez 4/18/2017 18:39'!capacity	"comment stating purpose of message"	| totalCapacityOfMyAlmacenationTanks |	totalCapacityOfMyAlmacenationTanks := 0.	almacenationTanks collect: [ :each | 		totalCapacityOfMyAlmacenationTanks := totalCapacityOfMyAlmacenationTanks + each capacity	].	^capacity min: totalCapacityOfMyAlmacenationTanks.! !!ProcessingPlant methodsFor: 'checking' stamp: 'PedroRodriguez 4/21/2017 15:21'!checkCapacity: aNumberOfCubicMetres	"comment stating purpose of message"	capacity < aNumberOfCubicMetres 		ifTrue: [ ^(Error signal: 'the processing plant does not have enough capacity ') ].		! !!ProcessingPlant methodsFor: 'checking' stamp: 'PedroRodriguez 4/21/2017 15:20'!checkAlmacenationTanks	"comment stating purpose of message"	almacenationTanks isEmpty 		ifTrue: [ ^(Error signal: 'the processing plant does not have a deposit to send the gas and water ') ].		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProcessingPlant class	instanceVariableNames: ''!!ProcessingPlant class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/18/2017 14:54'!initializeWithMaxDailyProductProcessing: aNumber remainingDaysToCompletion: anAmountOfDays cost: aNumberOfDollars almacenationTanks: aListOfAlmacenationTanks	"comment stating purpose of message"	^self new 		initializeWithMaxDailyProductProcessing: aNumber 		remainingDaysToCompletion: anAmountOfDays 		cost: aNumberOfDollars 		almacenationTanks: aListOfAlmacenationTanks ! !Action subclass: #Reinyect	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Reinyect commentStamp: '<historical>' prior: 0!I reinyect gas or water into a Well.!Action subclass: #Rent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Rent commentStamp: '<historical>' prior: 0!When a Rig is rented, y have the responsibility of assigning it to some Well in the oilfield!!Rent methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:45'!rentFirstDayAndAssignParcel1	" rent only the first day a rig and assign it to the parcel number 1"	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aRig |			aRig := Rig 				power: aSimulator powerOfRigs				costRent: aSimulator costOfRentingRigs 				costDailyConsumption: aSimulator costOfConsumptionRigs				toParcel: (anOilfield parcels at: 1)				daysBasicFee: 0.			anOilfield numberOfActiveRigs >= aSimulator maxSimultaneousRigs 				ifTrue: [ ^(Error signal: 'cant have so many rigs active') ].			aRig assignWell: (anOilfield parcels at: 1) well.		]	]! !!Rent methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:44'!doNothing	^[ :anOilfield :aSimulator | ]! !!Rent methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:48'!rentTheFirstDay1RigWhichMustPayRentForMinimum5Days	" rent the first day a rig which must pay rent for at least 5 days "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			|aRig |			aRig := Rig 				power: aSimulator powerOfRigs				costRent: aSimulator costOfRentingRigs 				costDailyConsumption: aSimulator costOfConsumptionRigs				toParcel: (anOilfield parcels at: 1)				daysBasicFee: 5.			anOilfield numberOfActiveRigs >= aSimulator maxSimultaneousRigs 				ifTrue: [ ^(Error signal: 'cant have so many rigs active') ].			aRig assignWell: (anOilfield parcels at: 1) well.		]	]! !!Rent methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 19:47'!rentEveryDayANewFreeRigAndAssignItToParcel1	" rent every day a rig for free and assign it to the parcel number 1. check if oilfield has too many rigs before assigning"	^[ :anOilfield :aSimulator |		| aRig |		aRig := Rig 			power: aSimulator powerOfRigs			costRent: aSimulator costOfRentingRigs 			costDailyConsumption: aSimulator costOfConsumptionRigs			toParcel: (anOilfield parcels at: 1)			daysBasicFee: 0.		anOilfield numberOfActiveRigs >= aSimulator maxSimultaneousRigs 			ifTrue: [ ^(Error signal: 'cant have so many rigs active') ].		aRig assignWell: (anOilfield parcels at: 1) well.	]! !!Rent methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 21:45'!rentFirstDayAndAssignParcel1AndParcel2	"comment stating purpose of message"	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aRig anotherRig |			aRig := Rig 				power: aSimulator powerOfRigs				costRent: aSimulator costOfRentingRigs 				costDailyConsumption: aSimulator costOfConsumptionRigs				toParcel: (anOilfield parcels at: 1)				daysBasicFee: 0.			anotherRig := Rig 				power: aSimulator powerOfRigs				costRent: aSimulator costOfRentingRigs 				costDailyConsumption: aSimulator costOfConsumptionRigs				toParcel: (anOilfield parcels at: 2)				daysBasicFee: 0.			aRig assignWell: (anOilfield parcels at: 1) well.			anotherRig assignWell: (anOilfield parcels at: 2) well.			anOilfield numberOfActiveRigs > aSimulator maxSimultaneousRigs 				ifTrue: [ ^(Error signal: 'cant have so many rigs active') ].		]	]! !Object subclass: #Rig	instanceVariableNames: 'power costRent costDailyConsumption isActive lastAssignedWell daysLeftPayingBasicFee'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Rig commentStamp: 'PedroRodriguez 4/14/2017 07:30' prior: 0!I am a Rig. I am encharged of digging in a well in a parcel of an oilfield.!!Rig methodsFor: 'private' stamp: 'PedroRodriguez 4/16/2017 10:42'!power: aNumberOfMetresPerDay costRent: aNumberOfDollars costDailyConsumption: aNumberOfLitres toParcel: aParcel daysBasicFee: anAmountOfDays	"comment stating purpose of message"	power := aNumberOfMetresPerDay.	costRent :=aNumberOfDollars.	costDailyConsumption := aNumberOfLitres.	isActive := false.	aParcel addRig: self.	daysLeftPayingBasicFee := anAmountOfDays.! !!Rig methodsFor: 'private' stamp: 'PedroRodriguez 4/16/2017 10:42'!power: aNumberOfMetresPerDay costRent: aNumberOfDollars costDailyConsumption: aNumberOfLitres toParcel: aParcel	"comment stating purpose of message"	power := aNumberOfMetresPerDay.	costRent :=aNumberOfDollars.	costDailyConsumption := aNumberOfLitres.	isActive := false.	aParcel addRig: self.	daysLeftPayingBasicFee := 0.! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:16'!deactivate	"comment stating purpose of message"	isActive := false.! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:45'!advanceOneDay	"comment stating purpose of message"	daysLeftPayingBasicFee > 0 ifTrue: [ daysLeftPayingBasicFee := daysLeftPayingBasicFee - 1 ]! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:09'!assignWell: aWell	"comment stating purpose of message"	isActive := true.	lastAssignedWell := aWell.! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:19'!dig	"comment stating purpose of message"	isActive ifFalse: [ ^(Error signal: 'this rig is inactive. it cant dig any Well') ].	lastAssignedWell digWith: self.! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:27'!power	"comment stating purpose of message"	^power! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:50'!daysLeftPayingBasicFee	"comment stating purpose of message"	^daysLeftPayingBasicFee! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 15:31'!costRent	"comment stating purpose of message"	^costRent! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 09:02'!isActive	"comment stating purpose of message"	^isActive! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rig class	instanceVariableNames: ''!!Rig class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 10:43'!power: aNumberOfMetresPerDay costRent: aNumberOfDollars costDailyConsumption: aNumberOfLitres toParcel: aParcel daysBasicFee: anAmountOfDays	"comment stating purpose of message"	^self new		power: aNumberOfMetresPerDay 		costRent: aNumberOfDollars 		costDailyConsumption: aNumberOfLitres 		toParcel: aParcel 		daysBasicFee: anAmountOfDays! !!Rig class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 09:39'!power: aNumberOfMetresPerDay costRent: aNumberOfDollars costDailyConsumption: aNumberOfLitres toParcel: aParcel	"comment stating purpose of message"	^self new		power: aNumberOfMetresPerDay 		costRent: aNumberOfDollars 		costDailyConsumption: aNumberOfLitres 		toParcel: aParcel! !Action subclass: #Sell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Sell commentStamp: '<historical>' prior: 0!I have the responsibility of selling petroleum and gas!Object subclass: #Simulator	instanceVariableNames: 'daysSimulated maxSimultaneousRigs desiredAmountOfWells costOfRentingRigs costOfProcessingPlants costOfAlmacenationTanks costOfConsumptionRigs powerOfRigs log'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Simulator commentStamp: 'PedroRodriguez 4/14/2017 10:43' prior: 0!I am a simulatorI have the responsibility of assigning rigs to wells!!Simulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 20:22'!outputLogInformation: anOilfield	" output information of anOilfield on log "	Transcript show: '==> Status of Oilfield after simulating for '; show: daysSimulated; show: ' days: '; 		cr; space; space; show: 'Petrol: '; show: anOilfield petrolVolume;		cr; space; space; show: 'Water: '; show: anOilfield waterVolume;		cr; space; space; show: 'Gas: '; show: anOilfield gasVolume; 		cr; show: '================================================';		cr.			" technique: each action returns a string, containing information about what has been done (!!!!!!) "	log collect: [ :each | Transcript show: each; cr ].! !!Simulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 18:25'!nextDay: anOilfield with: anOilfieldGuideline	" simulate a new day in anOilfield according to the rules in anOilfieldOutline "	| actions |	actions := anOilfieldGuideline nextActionsOf: self in: anOilfield.	actions collect: [ :each | each value: anOilfield value: self ].	anOilfield advanceOneDay.	daysSimulated := daysSimulated + 1.! !!Simulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 18:25'!run: anOilfield until: aCondition with: anOilfieldOutline	[ aCondition check: anOilfield in: self ] whileTrue: [ self nextDay: anOilfield with: anOilfieldOutline ].		" output information about the state of the simulation "	self outputLogInformation: anOilfield.! !!Simulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 18:28'!addToLog: anEvent	"comment stating purpose of message"	log add: anEvent.! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 15:50'!costOfRentingRigs	^costOfRentingRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 11:59'!maxSimultaneousRigs	"comment stating purpose of message"	^maxSimultaneousRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 11:32'!powerOfRigs	"comment stating purpose of message"	^powerOfRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 15:51'!costOfConsumptionRigs	^costOfConsumptionRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/15/2017 14:52'!desiredAmountOfWells	"comment stating purpose of message"	^desiredAmountOfWells! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:14'!costOfAlmacenationTanks	"comment stating purpose of message"	^costOfAlmacenationTanks! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/19/2017 18:22'!daysSimulated	^daysSimulated! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:14'!costOfProcessingPlants	"comment stating purpose of message"	^costOfProcessingPlants ! !!Simulator methodsFor: 'private' stamp: 'PedroRodriguez 4/19/2017 18:27'!initializeWithMaxSimultaneousRigs: anInteger desiredAmountOfWells: anInteger2 costOfRentingRigs: aNumberOfDollars powerOfRigs: aNumberOfMetresPerDay costOfConsumptionRigs: aNumberOfDollars2 costOfProcessingPlants: aNumberOfDollars3 costOfAlmacenationTanks: aNumberOfDollars4		daysSimulated := 0.	maxSimultaneousRigs := anInteger.	desiredAmountOfWells := anInteger2.	costOfRentingRigs := aNumberOfDollars.	powerOfRigs := aNumberOfMetresPerDay.	costOfConsumptionRigs := aNumberOfDollars2.	costOfProcessingPlants := aNumberOfDollars3.	costOfAlmacenationTanks := aNumberOfDollars4. 	log := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Simulator class	instanceVariableNames: ''!!Simulator class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 20:09'!initializeWithMaxSimultaneousRigs: anInteger desiredAmountOfWells: anInteger2 costOfRentingRigs: aNumberOfDollars powerOfRigs: aNumberOfMetresPerDay costOfConsumptionRigs: aNumberOfDollars2 costOfProcessingPlants: aNumberOfDollars3 costOfAlmacenationTanks: aNumberOfDollars4	"comment stating purpose of message"	^self new		initializeWithMaxSimultaneousRigs: anInteger 		desiredAmountOfWells: anInteger2 		costOfRentingRigs: aNumberOfDollars 		powerOfRigs: aNumberOfMetresPerDay 		costOfConsumptionRigs: aNumberOfDollars2 		costOfProcessingPlants: aNumberOfDollars3 		costOfAlmacenationTanks: aNumberOfDollars4! !Object subclass: #Terrain	instanceVariableNames: 'resistence'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Terrain commentStamp: '<historical>' prior: 0!I am a terrain, which has certain resistence to being digged!!Terrain methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:25'!resistence: aPercentage	"comment stating purpose of message"	(aPercentage between: 0 and: 1) ifFalse: [ ^(Error signal: 'resistence must be a percentage') ].	resistence := aPercentage.! !!Terrain methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:29'!resistence	"comment stating purpose of message"	^resistence! !Terrain subclass: #Clay	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Clay commentStamp: '<historical>' prior: 0!I am clay. I dont have much resistance to being dug!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Clay class	instanceVariableNames: ''!!Clay class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:24'!new	"comment stating purpose of message"	^super new resistence: 0.3! !Terrain subclass: #Rocky	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Rocky commentStamp: '<historical>' prior: 0!I'm a rocky terrain... i have a lot of resistance to being dug.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rocky class	instanceVariableNames: ''!!Rocky class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:26'!new	"comment stating purpose of message"	^super new resistence: 0.6! !TestCase subclass: #TestsOilfield	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!TestsOilfield commentStamp: '<historical>' prior: 0!I take care of testing the dynamics of an oilfield!!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/18/2017 18:36'!test02ActivationAndDesactivationOfRigsAfterDigging	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell anotherRig anotherWell |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	aRig := Rig power: 142 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1).	anotherRig := Rig power: 143 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 2).	aWell := Well 		initializeOn: (parcels at: 1)		connectedTo: -1.	anotherWell := Well 		initializeOn: (parcels at: 2)		connectedTo: -1.	aRig assignWell: aWell.	anotherRig assignWell: anotherWell.	aRig dig. 	anotherRig dig.		self should: [ aRig isActive ].	self should: [ anotherRig isActive not ].! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/18/2017 18:35'!test04InitializeOilfieldPercentagesOk	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	aRig := Rig power: 10 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1).	aWell := Well 		initializeOn: (parcels at: 1)		connectedTo: -1.	aRig assignWell: aWell.	aRig dig.		self shouldnt: [ anOilfield. ] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 11:16'!test03InitializeOilfieldPercentagesNotOk	"comment stating purpose of message"	| parcels clay |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	self should: [ Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.3		withWater: 0.3		withGas: 0.5		withMoney: 100.	] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/18/2017 18:36'!test01AssignOneRigToOneWellAndDig	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell oneAssignation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	aRig := Rig power: 10 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1).	aWell := Well 		initializeOn: (parcels at: 1)		connectedTo: -1.	oneAssignation := aRig assignWell: aWell.	aRig dig.		self shouldnt: [ oneAssignation ] raise: Error.	self should: [ aRig isActive ].	self should: [ (parcels at: 1) well depth = 7 ].	self should: [ (anOilfield parcels at: 1) rigs size == 1 ].! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 11:16'!test06PotentialVolumeToExtractIsZero	"comment stating purpose of message"	| anOilfield parcels clay |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 50		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.		self should: [ anOilfield extractProduct: 100 ] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/18/2017 18:35'!test05InitializeOilfieldTypical	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	aRig := Rig power: 10 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1).	aWell := Well 		initializeOn: (parcels at: 1)		connectedTo: -1.	aRig assignWell: aWell.	aRig dig.		self shouldnt: [ anOilfield. ] raise: Error.! !TestCase subclass: #TestsSimulator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:22'!test07RentingOneRigUntilMoneyIsOverBis	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new rentFirstDayAndAssignParcel1;	" only the first day rent one new rig"		at: 3 put: Dig new digEveryDayTheWellInParcel1WithAllItsRigs.	" every day dig with all the rigs possible the well in parcel 1"			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnTotalMoneyLeft new minimumTotalMoneyLeft: 55. " enough money to rent 1 rig 5 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 		" the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated == 5.	self assert: anOilfield balanceSheet totalMoney == 50.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:23'!test13ActivatingWellWithoutWaitingOneDay	" extract product from the Well the first day "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 4.	actions		at: 1 put: Build new aBuildStrategy2; " build a Well on parcel number 1 the first day "		at: 2 put: Rent new rentFirstDayAndAssignParcel1;	" the first day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new digTheFirstDayParcel1WithAllTheRigsInTheParcel;	" dig just the first day the parcel number 1 with all the rigs present in the parcel "		at: 4 put: Extract new tryExtractingProductTheFirstDay. "the second day, activate every Well and extract all the volume available "	anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 1
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 200 " the power of the rig is of 200 metres/day => deactivates after the first day digging "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.			self should: [ aSimulator run: anOilfield until: aCondition with: anOilfieldOutline ] raise: Error.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:22'!test05RentingAndUsingOneRigForOneDayOk	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new rentFirstDayAndAssignParcel1;	"only the first day rent a rig"		at: 3 put: Dig new digTheFirstDayParcel1WithAllTheRigsInTheParcel.	"only the first day dig the well in parcel 1"			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5.		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self shouldnt: [ aNewSimulation ] raise: Error.	self assert: (anOilfield parcels at: 1) well depth = 7.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:17'!test01EndConditionOnNumberOfSimulatedDaysOk	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy1. " BuildStrategy2: build only 1 processingPlant and 1 almacenationTank "			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5.		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aSimulator daysSimulated equals: 5.	self assert: anOilfield balanceSheet totalMoney equals: 0.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:21'!test04ActivatingDeactivatingRigsAndPayingFee	" the rig finishes digging the first day, but we must keep paying the minimum fee for some more days "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; " build a Well on parcel number 1 the first day "		at: 2 put: Rent new rentTheFirstDay1RigWhichMustPayRentForMinimum5Days;	" the first day rent a rig (pay 5 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new digTheFirstDayParcel1WithAllTheRigsInTheParcel.	" dig just the first day the parcel number 1 with all the rigs present in the parcel "			anOilfieldOutline := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 200 " the power of the rig is of 200 metres/day => deactivates after the first day digging "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 10.	self assert: anOilfield numberOfWells = 1.	self assert: anOilfield numberOfActiveRigs = 0.	self assert: anOilfield balanceSheet totalMoney = 50.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:23'!test12TooManyActiveRigs	" the rig finishes digging the first day, but we must keep paying the minimum fee for some more days "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; " build a Well on parcel number 1 the first day "		at: 2 put: Rent new rentTheFirstDay1RigWhichMustPayRentForMinimum5Days;	" the first day rent a rig (pay 5 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new digTheFirstDayParcel1WithAllTheRigsInTheParcel.	" dig just the first day the parcel number 1 with all the rigs present in the parcel "	anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 0 " maximum: 0 rigs => return error if want to dig a well with a rig "
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 200 " the power of the rig is of 200 metres/day => deactivates after the first day digging "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.			self should: [ aSimulator run: anOilfield until: aCondition with: anOilfieldOutline ] raise: Error.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 11:11'!test08BuildDoNothing	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 1.	actions		at: 1 put: Build new doNothing.			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5. " simulate 5 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 " the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: 1=1.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:12'!test14ExtractionLimitedByProcessingPlantWithTwoWellsExceedingMaxSimultaneousRigs	" extract product from the Well the first day "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 3000 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 3000 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 4.	actions		at: 1 put: Build new aBuildStrategy4; 			" build a Well on parcel number 1 the first day "		at: 2 put: Rent new rentFirstDayAndAssignParcel1AndParcel2;				" the first day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new digTheFirstAndSecondDayParcel1And2WithAllTheRigsInTheParcel;				" dig just the first day the parcel number 1 with all the rigs present in the parcel "		at: 4 put: Extract new extractTheThirdAndFourthDayAsMuchProductAsPotentiallyPossible. 			"the second and third day, activate every Well and extract the max potential volume "	anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 4. " simulate 4 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 1
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 100 " power of the rig is of 200 metres/day => deactivates after the first day digging (parcel = 100 mts) "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.			self should: [ aSimulator run: anOilfield until: aCondition with: anOilfieldOutline ] raise: Error.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:15'!test09BuildOnePerParcelUntilDesiredAmount	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy5.			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5. " simulate 5 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 " the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 5.	self assert: anOilfield numberOfWells = 1.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:21'!test03RentingAndUsingOneRigForMoreThanOneDayOk	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new rentFirstDayAndAssignParcel1;	 " only the first day rent one new rig"		at: 3 put: Dig new digEveryDayTheWellInParcel1WithAllItsRigs.	"every day dig with all the rigs possible the well in parcel 1"			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 4.		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self shouldnt: [ aNewSimulation ] raise: Error.	self assert: (anOilfield parcels at: 1) well depth = 28.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:18'!test02EndConditionOnTotalMoneyLeftOk	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy1.			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnTotalMoneyLeft new minimumTotalMoneyLeft: 5.		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	" 1 WAT, 1 GAT "	aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aSimulator daysSimulated equals: 1.	self assert: anOilfield balanceSheet totalMoney equals: 0.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 16:22'!test06RentingOneRigUntilMoneyIsOver	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new rentFirstDayAndAssignParcel1;	"only the first day rent one new rig"		at: 3 put: Dig new digEveryDayTheWellInParcel1WithAllItsRigs.	"every day dig with all the rigs possible the well in parcel 1"			anOilfieldOutline := OilfieldGuideline createWith: actions.	aCondition := ConditionOnTotalMoneyLeft new minimumTotalMoneyLeft: 120. "not enough money left to start the simulation "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 10		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 0.	self assert: anOilfield balanceSheet totalMoney = 100.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:15'!test10Building1WellPerParcelUntilDesiredAmount	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy5.			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5. " simulate 5 days "		aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 1
		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 " the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 5.	self assert: anOilfield numberOfWells = 1.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:08'!test15ExtractionAndAlmacenationWith1Well1PP1T	" extract product from the Well the first day. the ATs should have the correct litres of gas and water stored "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 4.	actions		at: 1 put: Build new aBuildStrategy3; 			" build two Wells on parcels 1 and 2 the first day and an almacenation tank and a processing plant "		at: 2 put: Rent new rentFirstDayAndAssignParcel1;				" the first day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new digTheFirstDayParcel1WithAllTheRigsInTheParcel;				" dig just the first day the parcel number 1 with all the rigs present in the parcel "		at: 4 put: Extract new extractTheThirdAndFourthDayAsMuchProductAsPotentiallyPossible. 			"the second and third day, activate every Well and extract the max potential volume "	anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 4. " simulate 4 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 2		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 100 " power of the rig is of 100 metres/day => deactivates after the second day digging (parcel = 100 mts) "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: anOilfield gasTanks first gas = 100.	self assert: anOilfield waterTanks first water = 60.! !!TestsSimulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/25/2017 16:23'!test11RentingAndUsingRigsForOneDayOk	| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay).	anOilfield := Oilfield		parcelate: parcels		withVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new rentEveryDayANewFreeRigAndAssignItToParcel1;	"every day rent a new rig"		at: 3 put: Dig new digEveryDayTheWellInParcel1WithAllItsRigs.	"every day dig the parcel 1 with all the possible rigs"			anOilfieldOutline  := OilfieldGuideline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 2.	"2 days => 1:[1rig, 7metres], 2:[2rig, 14metres] => 7+14=21"			aSimulator := Simulator 
		initializeWithMaxSimultaneousRigs: 10 
		desiredAmountOfWells: 10 
		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		aNewSimulation. "this line should not return error"	self assert: (anOilfield parcels at: 1) well depth = 21.! !AlmacenationTank subclass: #WaterAlmacenationTank	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!WaterAlmacenationTank commentStamp: '<historical>' prior: 0!Hi!! i am a water AT!!WaterAlmacenationTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:19'!water	^ water! !!WaterAlmacenationTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/25/2017 18:18'!almacenateWater: aNumberOfCubicMetres	"comment stating purpose of message"	capacity >= aNumberOfCubicMetres		ifTrue: [ 			water := water + aNumberOfCubicMetres.			capacity := capacity - aNumberOfCubicMetres		]		ifFalse: [ ^(Error signal: 'cant almacenate so much in this almacenation tank') ].! !Object subclass: #Well	instanceVariableNames: 'depth parcel isActive daysSinceFinished name processingPlants'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Well commentStamp: '<historical>' prior: 0!I am a Well. I can be dug by Rigs working in a parcel of an oilfield!!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/15/2017 21:32'!deactivate	"comment stating purpose of message"	isActive := false.! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 17:05'!advanceOneDay	" the depth that can be dug depends on the rig and on the terrain of the parcel corresponding to the well "	depth = self parcel depth ifTrue: [ 		daysSinceFinished := daysSinceFinished + 1	].! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 14:34'!selectProcessingPlantsForExtracting: aNumberOfCubicMetresToExtract		"return the PPs that has some capacity left"		self checkProcessingPlantsNotEmpty.	self checkForBuiltProcessingPlants.	self checkCapabilityToProcess: aNumberOfCubicMetresToExtract.			^(processingPlants select: [ :each | each capacity > 0 ]).! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:58'!checkCapabilityToProcess: aNumberOfCubicMetresToExtract	"comment stating purpose of message"	self maxProcessingCapability < aNumberOfCubicMetresToExtract		ifTrue: [ ^(Error signal: 'the well doesnt have enough processing capability') ].! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 12:53'!checkProcessingPlantsNotEmpty			processingPlants isEmpty 		ifTrue: [ ^(Error signal: 'cant extract product from well because it isnt connected to a processing plant') ].! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 17:15'!activate	"comment stating purpose of message"	depth < parcel depth ifTrue: [ ^(Error signal: 'cant activate Well until after reaching bottom') ].	daysSinceFinished < 1 ifTrue: [ ^(Error signal: 'cant activate Well until at least 1 day of finishing digging') ].	isActive := true.! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:52'!maxProcessingCapability	"comment stating purpose of message"	| maximumProcessingCapability builtProcessingPlants maximumAlmacenationCapacity |	maximumProcessingCapability := 0.	maximumAlmacenationCapacity := 0.	builtProcessingPlants := processingPlants select: [ :each | each isAlreadyBuilt ].		" maximumProcessingCapability without considering the case where two PPs connect to the same almacenation tank "	builtProcessingPlants collect: [ :eachPP | 		maximumProcessingCapability := maximumProcessingCapability + eachPP capacity.		eachPP almacenationTanks collect: [ :eachAT |			maximumAlmacenationCapacity := maximumAlmacenationCapacity + eachAT capacity		]	].	" check the maximum capacity of all the almacenation tanks connected to these processing plants "			^(maximumProcessingCapability min: maximumAlmacenationCapacity)! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/19/2017 19:30'!digWith: aRig	" the depth that can be dug depends on the rig and on the terrain of the parcel corresponding to the well "	| maxToDig depthDug |	maxToDig := aRig power * (1 - self parcel terrain resistence).	depthDug := maxToDig min: self parcel depth - self depth.	depth := depth + depthDug.	" deactivate the rig when it finishes digging "	depth = self parcel depth ifTrue: [ 		aRig deactivate.	].! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:00'!checkForBuiltProcessingPlants	"comment stating purpose of message"	| builtProcessingPlants |	builtProcessingPlants := processingPlants select: [ :each | each isAlreadyBuilt ].	builtProcessingPlants size > 0 		ifFalse: [ ^(Error signal: 'the well does not have any available processing plant') ].! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 15:18'!sendToProcessingPlants: aNumberOfCubicMetres withPercentages: anArrayOfPercentagesWGP	" must check if between all the processing plants that are already built, they can process the desired amount of product "		| availableProcessingPlants i cubicMetresLeft |		" get all the PPs that still have some capacity left "	availableProcessingPlants := self selectProcessingPlantsForExtracting: aNumberOfCubicMetres.			" Use every possible processing plant in order to process the product "	i := 1.	cubicMetresLeft := aNumberOfCubicMetres.	[ cubicMetresLeft > 0] whileTrue: [ 		| capacityOfPP |		capacityOfPP := (availableProcessingPlants at: i) capacity.		(availableProcessingPlants at: i) process: capacityOfPP withPercentages: anArrayOfPercentagesWGP.		cubicMetresLeft := cubicMetresLeft - capacityOfPP.		i := i + 1.	].		^1! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:05'!parcel	"comment stating purpose of message"	^parcel! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:06'!depth	"comment stating purpose of message"	^depth! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/17/2017 14:22'!name	"comment stating purpose of message"	^name! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/15/2017 21:33'!isActive	"comment stating purpose of message"	^isActive! !!Well methodsFor: 'private' stamp: 'PedroRodriguez 4/18/2017 20:55'!initializeOn: aParcel withName: aName withProcessingPlant: aProcessingPlant	"comment stating purpose of message"	depth := 0.	isActive := false.	aParcel createWell: self.	parcel := aParcel.	daysSinceFinished := 0.	name := aName.	processingPlants := OrderedCollection new.	processingPlants add: aProcessingPlant.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Well class	instanceVariableNames: 'lastId'!!Well class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 16:03'!initializeOn: aParcel connectedTo: aProcessingPlant	"comment stating purpose of message"	lastId isNil ifTrue: [ lastId := 1 ] ifFalse: [ lastId := lastId + 1 ].	^self new 		initializeOn: aParcel		withName: lastId		withProcessingPlant: aProcessingPlant! !